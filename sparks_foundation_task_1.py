# -*- coding: utf-8 -*-
"""Sparks Foundation Task 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1unyIr6dnIWEc6SIvL83ZyeICoT-owo2g
"""

# Commented out IPython magic to ensure Python compatibility.
#IMPORTING THE DATA
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

#to ignore warnings
import warnings as wg
wg.filterwarnings("ignore")

url = "https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv"
df = pd.read_csv(url)

#first 5 observations
df.head()

#last 5 observations
df.tail()

#rows and columns
df.shape

#more information about the data set
df.info()

df.describe()

#checking missing values in the data
df.isnull().sum()

#there is no missing data in the set

#plotting the dataset
plt.rcParams["figure.figsize"]=[16,9]
df.plot(x="Hours", y="Scores", style="*", color="red", markersize=10)
plt.title("Hours vs. Percentage")
plt.xlabel("Hours Studied")
plt.ylabel("Percentage Scored")
plt.grid()
plt.show()

#FROM THE GRAPH ABOVE, WE CAN OBSERVE THAT THERE IS A LINEAR RELATION BETWEEN THE 'HOURS STUDIED' AND THE 'PERCENTAGE SCORED'

#correlation between the variables:
df.corr()

#DATA PREPARATION

df.head()

#using iloc function, we will divide the data
X= df.iloc[:,:1].values
y=df.iloc[:,1:].values

X

#splitting the data into training and testing data

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=0)
#test size 0.2 = dividing the data into 80-20 ratio
#random state is used to pickup the values randomly (setting it to 0 means no randomness)

#TRAINING THE ALGORITHM

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)

#VISUALIZING THE MODEL

#plotting for the training data
line = model.coef_*X + model.intercept_

plt.rcParams["figure.figsize"]=[16,9]
plt.scatter(X_train,y_train, color="black")
plt.plot(X, line, color="green")
plt.xlabel("Hours Studied")
plt.ylabel("Percentage Scored")
plt.grid()
plt.show()

#plotting for testing data
plt.rcParams['figure.figsize']=[16,9]
plt.scatter(X_test, y_test, color="black")
plt.plot(X, line, color="green")
plt.xlabel("Hours Studied")
plt.ylabel("Percentage Scored")
plt.grid()
plt.show()

#MAKING PREDICTIONS
print(X_test) #testing data in hours
y_pred = model.predict(X_test) #Predicting the scores

#Comparing Actual Vs Predicted
comp = pd.DataFrame({"Actual":[y_test], "Predicted":[y_pred]})
comp

#Testing with our own data
hours = input("input hours here: ")
own_pred = model.predict([[hours]])
print("The predicted score if a person studies for", hours, "hours is ", own_pred[0])

#Evaluating the model

from sklearn import metrics

print("Mean Absolute Error: ", metrics.mean_absolute_error(y_test, y_pred))